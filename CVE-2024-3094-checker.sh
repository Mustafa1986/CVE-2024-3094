import subprocess
import os
import sys
import requests
import tarfile

# Vulnerable versions (replace with actual vulnerable versions)
VULNERABLE_VERSIONS = ["X.Y.Z", "A.B.C"] 
# Stable version (replace with actual stable version)
STABLE_VERSION = "P.Q.R"
STABLE_VERSION_URL = f"https://example.com/downloads/stable_version.tar.gz"  # Replace with actual URL

# ANSI color codes (can be replaced with a logging library for better formatting)
GREEN = '\033[92m'
RED = '\033[91m'
ENDC = '\033[0m'


def install_stable_version():
    print(f"Downloading version {STABLE_VERSION} from {STABLE_VERSION_URL}...")
    try:
        response = requests.get(STABLE_VERSION_URL)
        response.raise_for_status()

        # Use a temporary file name to avoid overwriting existing files
        temp_filename = f"temp_{STABLE_VERSION}.tar.gz"
        with open(temp_filename, "wb") as f:
            f.write(response.content)

        print(f"Extracting {temp_filename}...")
        with tarfile.open(temp_filename, "r:gz") as tar:
            tar.extractall()

        # Assuming the extracted directory has the same name as the archive
        extracted_dir = os.path.splitext(temp_filename)[0] 
        print(f"Compiling and installing version {STABLE_VERSION}...")
        os.chdir(extracted_dir)
        subprocess.run(["./configure"])
        subprocess.run(["make"])
        subprocess.run(["sudo", "make", "install"])
        print(f"{GREEN}Version {STABLE_VERSION} installed successfully.{ENDC}")
    except Exception as e:
        print(f"{RED}Installation failed. Error: {e}{ENDC}")
        sys.exit(1)
    finally:
        # Clean up temporary file
        if os.path.exists(temp_filename):
            os.remove(temp_filename)


def check_vulnerability():
    try:
        result = subprocess.run(["xz", "--version"], capture_output=True, text=True)
        current_version = result.stdout.splitlines()[0].split()[-1]
        print(f"Detected version: {current_version}")

        if current_version in VULNERABLE_VERSIONS:
            print(f"{RED}WARNING: Your system is vulnerable with version {current_version}.{ENDC}")
            response = input("Would you like to install the stable version {STABLE_VERSION}? (yes/no): ")
            if response.lower() == "yes":
                install_stable_version()
            else:
                print(f"{RED}Manual intervention required. Please ensure your system is at version {STABLE_VERSION}.{ENDC}")
                sys.exit(1)
        else:
            print(f"{GREEN}Your system does not appear to be vulnerable based on the installed version.{ENDC}")
    except FileNotFoundError:
        print("xz-utils is not installed. Your system is not vulnerable.")
        sys.exit(0)
    except Exception as e:
        print(f"{RED}Error: {e}{ENDC}")
        sys.exit(1)


if __name__ == "__main__":
    check_vulnerability()